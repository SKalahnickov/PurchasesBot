using Microsoft.Extensions.Configuration;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Collections.Concurrent;

namespace PurchasesBot
{
    public class PurchasesBotService : IPurchasesBotService
    {
        private readonly ITokenHolder _tokenHolder;
        private TelegramBotClient? _botClient;
        private readonly ConcurrentDictionary<long, UserFormState> _userStates = new();
        private readonly ReceiverOptions _receiverOptions = new() { AllowedUpdates = Array.Empty<UpdateType>() };
        private CancellationTokenSource? _cts;

        public PurchasesBotService(ITokenHolder tokenHolder)
        {
            _tokenHolder = tokenHolder;
        }

        public void Start()
        {
            _cts = new CancellationTokenSource();
            if (string.IsNullOrWhiteSpace(_tokenHolder.Token))
                throw new InvalidOperationException("TokenHolder.Token –Ω–µ –∑–∞–¥–∞–Ω!");
            _botClient = new TelegramBotClient(_tokenHolder.Token);
            _botClient.StartReceiving(HandleUpdateAsync, HandlePollingErrorAsync, _receiverOptions, _cts.Token);
        }

        public void Stop()
        {
            _cts?.Cancel();
        }

        private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            var message = update.Message ?? update.EditedMessage ?? update.ChannelPost ?? update.EditedChannelPost;
            if (message is null)
                return;
            var chatId = message.Chat.Id;
            var text = message.Text;
            var state = _userStates.GetOrAdd(chatId, _ => new UserFormState());

            if (message.Photo != null && message.Photo.Length > 0 && !string.IsNullOrEmpty(message.MediaGroupId))
            {
                if (message.MediaGroupId == state.MediaGroupId)
                {
                    var fileId = message.Photo[^1].FileId;
                    if (!state.PhotoFileIds.Contains(fileId))
                        state.PhotoFileIds.Add(fileId);
                }
            }

            if (text == "/start")
            {
                _userStates[chatId] = new UserFormState();
                await botClient.SendMessage(
                    chatId: chatId,
                    text: "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                    cancellationToken: cancellationToken
                );
                return;
            }

            switch (state.Step)
            {
                case 0:
                    if (!string.IsNullOrWhiteSpace(message.Text))
                    {
                        state.Name = message.Text;
                        state.Step = 1;
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:",
                            cancellationToken: cancellationToken
                        );
                    }
                    else
                    {
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                            cancellationToken: cancellationToken
                        );
                    }
                    break;
                case 1:
                    if (message.Photo != null && message.Photo.Length > 0)
                    {
                        state.MediaGroupId = message.MediaGroupId;
                        state.PhotoFileIds ??= new HashSet<string>();
                        state.PhotoFileIds.Add(message.Photo[^1].FileId);
                        state.Step = 2;
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:",
                            cancellationToken: cancellationToken
                        );
                    }
                    break;
                case 2:
                    if (!string.IsNullOrWhiteSpace(message.Text))
                    {
                        var priceInput = message.Text.Trim();
                        string formattedPrice = priceInput;
                        var priceMatch = System.Text.RegularExpressions.Regex.Match(priceInput, @"^(\d+[.,]?\d*)\s*(.*)$");
                        if (priceMatch.Success)
                        {
                            var number = priceMatch.Groups[1].Value.Replace(',', '.');
                            var currency = priceMatch.Groups[2].Value.Trim().ToLower();
                            if (string.IsNullOrEmpty(currency) || currency == "—Ä–µ–∞–ª" || currency == "—Ä–µ–∞–ª–æ–≤")
                            {
                                formattedPrice = $"{number} R$";
                            }
                            else
                            {
                                formattedPrice = priceInput;
                            }
                        }
                        state.Price = formattedPrice;
                        state.Step = 3;
                        var sectionKeyboard = new ReplyKeyboardMarkup(new[]
                        {
                            new[] { new KeyboardButton("ü•¶ –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã"), new KeyboardButton("üçñ –ú—è—Å–æ –∏ —Ä—ã–±–∞") },
                            new[] { new KeyboardButton("üßÄ –ú–æ–ª–æ—á–∫–∞ –∏ —Å—ã—Ä—ã"), new KeyboardButton("ü•ó –ì–æ—Ç–æ–≤–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ") },
                            new[] { new KeyboardButton("ü•´ –î–æ–ª–≥–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"), new KeyboardButton("üßÉ –ù–∞–ø–∏—Ç–∫–∏") },
                            new[] { new KeyboardButton("ü§î –°—Ç—Ä–∞–Ω–Ω–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ") }
                        })
                        {
                            ResizeKeyboard = true,
                            OneTimeKeyboard = true
                        };
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                            replyMarkup: sectionKeyboard,
                            cancellationToken: cancellationToken
                        );
                    }
                    break;
                case 3:
                    var validSections = new[]
                    {
                        "ü•¶ –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã",
                        "üçñ –ú—è—Å–æ –∏ —Ä—ã–±–∞",
                        "üßÄ –ú–æ–ª–æ—á–∫–∞ –∏ —Å—ã—Ä—ã",
                        "ü•ó –ì–æ—Ç–æ–≤–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ",
                        "ü•´ –î–æ–ª–≥–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
                        "üßÉ –ù–∞–ø–∏—Ç–∫–∏",
                        "ü§î –°—Ç—Ä–∞–Ω–Ω–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"
                    };
                    if (validSections.Contains(message.Text?.Trim()))
                    {
                        state.Section = message.Text.Trim();
                        state.Step = 4;
                        var ratingKeyboard = new ReplyKeyboardMarkup(new[]
                        {
                            new[] { new KeyboardButton("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ"), new KeyboardButton("–£–∂–∞—Å–Ω–æ") }
                        })
                        {
                            ResizeKeyboard = true,
                            OneTimeKeyboard = true
                        };
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–û—Ü–µ–Ω–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                            replyMarkup: ratingKeyboard,
                            cancellationToken: cancellationToken
                        );
                    }
                    else
                    {
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞:",
                            cancellationToken: cancellationToken
                        );
                    }
                    break;
                case 4:
                    if (message.Text is "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ" or "–£–∂–∞—Å–Ω–æ")
                    {
                        state.Rating = message.Text;
                        state.Step = 5;
                        var commentKeyboard = new ReplyKeyboardMarkup(new[]
                        {
                            new[] { new KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"), new KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å") }
                        })
                        {
                            ResizeKeyboard = true,
                            OneTimeKeyboard = true
                        };
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
                            replyMarkup: commentKeyboard,
                            cancellationToken: cancellationToken
                        );
                    }
                    else
                    {
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –∏–ª–∏ –£–∂–∞—Å–Ω–æ.",
                            cancellationToken: cancellationToken
                        );
                    }
                    break;
                case 5:
                    if (message.Text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                    {
                        goto case 6;
                    }
                    else if (message.Text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                    {
                        state.Step = 6;
                        await botClient.SendMessage(
                            chatId: chatId,
                            text: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                            replyMarkup: new ReplyKeyboardRemove(),
                            cancellationToken: cancellationToken
                        );
                        break;
                    }
                    else
                    {
                        state.Comment = message.Text;
                        goto case 6;
                    }
                case 6:
                    if (state.Step == 6 && !string.IsNullOrWhiteSpace(message.Text) && message.Text != "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                        state.Comment = message.Text;
                    var resultMsg = $"üõí <b>–ù–æ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞</b>\n" +
                                    $"üçó <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{state.Name}</i>\n" +
                                    $"üí∞ <b>–¶–µ–Ω–∞:</b> <i>{state.Price}</i>\n" +
                                    $"üè∑ <b>–†–∞–∑–¥–µ–ª:</b> <i>{state.Section}</i>\n" +
                                    $"‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> <i>{(state.Rating == "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ" ? "ü§§ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ" : "ü§¢ —É–∂–∞—Å–Ω–æ")}</i>";
                    if (!string.IsNullOrWhiteSpace(state.Comment))
                    {
                        resultMsg += $"\nüìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{state.Comment}</i>";
                    }
                    var sectionTag = new string((state.Section ?? "").Where(char.IsLetter).ToArray()).ToLower();
                    var nameTag = string.Join("_", (state.Name ?? "").Split(' ').Select(w => new string(w.Where(char.IsLetter).ToArray()).ToLower()).Where(s => !string.IsNullOrWhiteSpace(s)));
                    var tags = $"\n\n#–Ω–∞—Ö–æ–¥–∫–∞ #{sectionTag} #–æ—Ü–µ–Ω–∫–∞_{(state.Rating == "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ" ? "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ" : "—É–∂–∞—Å–Ω–æ")}";
                    if (!string.IsNullOrWhiteSpace(nameTag))
                        tags += $" #{nameTag}";
                    resultMsg += tags;
                    var media = state.PhotoFileIds.Select((fileId, idx) =>
                        idx == 0
                            ? new InputMediaPhoto(fileId) { Caption = resultMsg, ParseMode = ParseMode.Html }
                            : new InputMediaPhoto(fileId)
                    ).ToArray();
                    await botClient.SendMediaGroup(
                        chatId: chatId,
                        media,
                        cancellationToken: cancellationToken
                    );
                    _userStates.TryRemove(chatId, out _);
                    break;
            }
        }

        private Task HandlePollingErrorAsync(ITelegramBotClient _, Exception exception, CancellationToken __)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞: {exception.Message}");
            return Task.CompletedTask;
        }
    }
}

